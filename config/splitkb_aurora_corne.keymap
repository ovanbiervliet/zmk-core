#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/helper.h"

#define CMK 0
#define NUM 1
#define SYM 2
#define FIG 3
#define QWT 4

#define U_RDO &kp LS(LG(Z))
#define U_PST &kp LG(V)
#define U_CPY &kp LG(C)
#define U_CUT &kp LG(X)
#define U_UND &kp LG(Z)

// #include "combos.dtsi"  // must be sourced after layer-shortcuts
#include "mouse.dtsi"

// Behavior Overrides
&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    global-quick-tap;
};

/ {
    macros {
        spotlight: spotlight {
            label = "spotlight";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_tap &kp SPACE>, <&macro_release &kp LGUI>;
        };

        // Emoji
        mac_emoji: mac_emoji {
            label = "mac_emoji";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_press &kp LCTRL>, <&macro_tap &kp SPACE>, <&macro_release &kp LCTRL>, <&macro_release &kp LGUI>;
        };

        ij: ij {
            label = "ij";
            compatible = "zmk,behavior-macro";
            wait-ms = <30>;
            tap-ms = <30>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp I>, <&macro_tap &kp J>;
        };

        sch: sch {
            label = "sch";
            compatible = "zmk,behavior-macro";
            wait-ms = <30>;
            tap-ms = <30>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S>, <&macro_tap &kp C>, <&macro_tap &kp H>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tab {
          timeout-ms = <20>;
          key-positions = <1 2>;
          bindings = <&kp TAB>;
        };

        //  combo_sch {
        //    timeout-ms = <20>;
        //    key-positions = <14 15>;
        //    bindings = <&sch>;
        //  };
        //
        //  combo_ij {
        //    timeout-ms = <20>;
        //    key-positions = <20 21>;
        //    bindings = <&ij>;
        //  };
        
        //  combo_enter {
        //    timeout-ms = <20>;
          //  key-positions = <13 14>;
          //  bindings = <&kp ENTER>;
        //};
    };

    behaviors {
        td_multi_mac: tap_dance_multi_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MULTI_MAC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&spotlight>, <&mac_emoji>;
        };

        bm: bottom_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cm: code_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            retro-tap;
        };

        sm: space_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        gmt: global-quick-mod-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "gmt";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        glt: global-quick-layer-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "glt";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

        gbt: global-quick-mousebutton-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "gbt";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&mkp>, <&kp>;
        };


    };

    keymap {
        compatible = "zmk,keymap";

        // to properly map Colemak to Qwerty on macOS, we use P for semicolon

        qwt_layer {
            bindings = <
                &kp TAB       &kp Q            &kp W           &kp E           &kp R           &kp T                    &kp Y              &kp U              &kp I              &kp O             &kp P             &kp SQT
                &kp ESC       &gmt LSHFT A     &gmt LCTRL S    &gmt LALT D     &gmt LGUI F     &gbt MB3 G               &kp H              &gmt LGUI J        &gmt LALT K        &gmt LCTRL L      &gmt LSHFT SEMI   &kp LS(P)
                U_BTN3        &kp Z            &kp X           &kp C           &kp V           &kp B                    &kp N              &kp M              &kp COMMA          &kp DOT           &kp SLASH         U_BTN1
                                                               &glt NUM ESC    U_BTN1          &kp SPACE                &kp BSPC           &glt SYM RET       &glt FIG DEL
            >;
        };

        num_layer {
            bindings = <
                &mkp MB4     &bootloader      &none           &none           &none           &caps_word                &none             &kp NUM_7          &kp NUM_8          &kp NUM_9          &kp END           U_UND
                &mkp MB5     &kp LSHFT        &kp LCTRL       &kp LALT        &kp LGUI        &key_repeat               &kp DOT           &kp NUM_4          &kp NUM_5          &kp NUM_6          &kp RIGHT         U_RDO
                &mkp MB3     U_UND            U_CUT           U_CPY           U_PST           U_RDO                     &kp COMMA         &kp NUM_1          &kp NUM_2          &kp NUM_3          &kp RET           &none
                                                              &none           &none           &none                     &kp BSPC          &kp NUM_0          &kp DEL
            >;
        };

        sym_layer {
            bindings = <
                U_WH_U       &kp EXCL         &kp AT          &kp HASH        &kp DLLR       &kp PRCT                   &kp CRRT          &kp HOME           &kp PG_DN          &kp PG_UP          &kp END           U_WH_L
                U_WH_D       &kp LPAR         &kp LBKT        &kp RBKT        &kp RPAR       &kp LS(LA(NUM_2))          &kp AMPS          &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT         U_WH_R
                &none        &kp LT           &kp GRAVE       &kp BSLH        &kp GT         &kp LA(NUM_3)              &kp ASTRK         &kp MINUS          &kp EQL            &kp LS(P)          &kp P             &none
                                                              &kp ESC         U_BTN2         &kp SPACE                  &none             &none              &none
            >;
        };

        fig_layer {
            bindings = <
                U_MS_U       &bootloader      &none           &none           &none          &to QWT                    &none              U_MS_L             U_MS_D            U_MS_U            U_MS_R            &kp LG(NUM_0)
                U_MS_D       &kp LSHFT        &kp LCTRL       &kp LALT        &kp LGUI       &to CMK                    &kp COMMA          U_WH_L             U_WH_D            U_WH_U            U_WH_R            &none
                &none        &none            &none           &none           &none          &none                      &kp DOT            &kp RET            &kp ESC           &kp LG(SLASH)     &kp LG(BSLH)      &none
                                                              &none           &none          &none                      &none              &kp NUM_0          &none
            >;
        };

        cmk_layer {
            bindings = <
                U_BTN1       &kp Q            &kp W           &kp F           &kp P           &kp G                    &kp J              &kp L              &kp U              &kp Y             &kp SQT           U_BTN4
                &kp LGUI     &gmt LSHFT A     &gmt LCTRL R    &gmt LALT S     &gmt LGUI T     &kp D                    &kp H              &gmt LGUI N        &gmt LALT E        &gmt LCTRL I      &gmt LSHFT O      U_BTN5
                U_BTN2       &kp Z            &kp X           &kp C           &kp V           &kp B                    &kp K              &kp M              &kp COMMA          &kp DOT           &kp SLASH         U_BTN3
                                                              &glt NUM ESC    &glt NUM SPACE  &glt SYM TAB             &glt NUM BSPC      &glt SYM RET       &glt NUM DEL
            >;
        };


    };
};
